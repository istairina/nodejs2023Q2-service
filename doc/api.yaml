openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UserController_create
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request: some required fields are empty or it has wrong data'
      tags:
        - user
    get:
      operationId: UserController_findAll
      summary: Get list of all users
      parameters: []
      responses:
        '200':
          description: Users have been got
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - user
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Get a user by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Put a user id
          schema: {}
      responses:
        '200':
          description: User has been got
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request: userID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - user
    put:
      operationId: UserController_update
      summary: Change password of the user
      parameters:
        - name: id
          required: true
          in: path
          description: Put a user id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request: userID is invalid'
        '403':
          description: 'Forbidden: old password is wrong'
        '404':
          description: ID doesn't exist in the database
      tags:
        - user
    delete:
      operationId: UserController_remove
      summary: Delete the user
      parameters:
        - name: id
          required: true
          in: path
          description: Put a user id
          schema: {}
      responses:
        '204':
          description: 'No content: user has been deleted'
        '400':
          description: 'Bad request: userID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - user
  /track:
    post:
      operationId: TrackController_create
      summary: Create a new track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '400':
          description: 'Bad request: some required fields are empty or it has wrong data'
      tags:
        - track
    get:
      operationId: TrackController_findAll
      summary: Get list of all tracks
      parameters: []
      responses:
        '200':
          description: Tracks have been got
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackDto'
      tags:
        - track
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Get a track by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '200':
          description: Track has been got
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '400':
          description: 'Bad request: trackID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - track
    put:
      operationId: TrackController_update
      summary: Change data of the track
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: User has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '400':
          description: 'Bad request: trackID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - track
    delete:
      operationId: TrackController_remove
      summary: Delete the track
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '204':
          description: 'No content: track has been deleted'
        '400':
          description: 'Bad request: trackID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - track
  /artist:
    post:
      operationId: ArtistController_create
      summary: Create a new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The artist has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDto'
        '400':
          description: 'Bad request: some required fields are empty or it has wrong data'
      tags:
        - artist
    get:
      operationId: ArtistController_findAll
      summary: Get list of all artists
      parameters: []
      responses:
        '200':
          description: Artists have been got
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistDto'
      tags:
        - artist
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: Get an artist by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '200':
          description: Album has been got
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDto'
        '400':
          description: 'Bad request: artistID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - artist
    put:
      operationId: ArtistController_update
      summary: Change data of the artist
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: User has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDto'
        '400':
          description: 'Bad request: artistID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - artist
    delete:
      operationId: ArtistController_remove
      summary: Delete the artist
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '204':
          description: 'No content: artist has been deleted'
        '400':
          description: 'Bad request: artistID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - artist
  /album:
    post:
      operationId: AlbumController_create
      summary: Create a new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: 'Bad request: some required fields are empty or it has wrong data'
      tags:
        - album
    get:
      operationId: AlbumController_findAll
      summary: Get list of all albums
      parameters: []
      responses:
        '200':
          description: Albums have been got
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumDto'
      tags:
        - album
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: Get an album by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Gets the Action id
          schema: {}
      responses:
        '200':
          description: Album has been got
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: 'Bad request: albumID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - album
    put:
      operationId: AlbumController_update
      summary: Change data of the album
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: User has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: 'Bad request: albumID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - album
    delete:
      operationId: AlbumController_remove
      summary: Delete the album
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '204':
          description: 'No content: album has been deleted'
        '400':
          description: 'Bad request: albumID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - album
  /favs:
    get:
      operationId: FavouriteController_findAll
      summary: Get list of all favourites
      parameters: []
      responses:
        '200':
          description: All favourites have been got
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
      tags:
        - favourite
  /favs/track/{id}:
    post:
      operationId: FavouriteController_addTrack
      summary: Add a new track to favourite
      parameters:
        - name: id
          required: true
          in: path
          description: Put a track id
          schema: {}
      responses:
        '201':
          description: The track has been added to favourites
        '400':
          description: 'Bad request: trackID is invalid'
        '422':
          description: TrackID doesn't exist
      tags:
        - favourite
    delete:
      operationId: FavouriteController_removeTrack
      summary: Delete a track from favourites
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '204':
          description: 'No content: an item by the ID has been deleted'
        '400':
          description: 'Bad request: trackID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - favourite
  /favs/album/{id}:
    post:
      operationId: FavouriteController_addAlbum
      summary: Add a new album to favourite
      parameters:
        - name: id
          required: true
          in: path
          description: Put an album id
          schema: {}
      responses:
        '201':
          description: The album has been added to favourites
        '400':
          description: 'Bad request: album ID is invalid'
        '422':
          description: AlbumID doesn't exist
      tags:
        - favourite
    delete:
      operationId: FavouriteController_removeAlbum
      summary: Delete an album from favourites
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '204':
          description: 'No content: an item by the ID has been deleted'
        '400':
          description: 'Bad request: albumID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - favourite
  /favs/artist/{id}:
    post:
      operationId: FavouriteController_addArtist
      summary: Add a new artist to favourite
      parameters:
        - name: id
          required: true
          in: path
          description: Put an artist id
          schema: {}
      responses:
        '201':
          description: The artist has been added to favourites
        '400':
          description: 'Bad request: artistID is invalid'
        '422':
          description: ArtistID doesn't exist
      tags:
        - favourite
    delete:
      operationId: FavouriteController_removeArtist
      summary: Delete an artist from favourites
      parameters:
        - name: id
          required: true
          in: path
          description: Put id
          schema: {}
      responses:
        '204':
          description: 'No content: an item by the ID has been deleted'
        '400':
          description: 'Bad request: artistID is invalid'
        '404':
          description: ID doesn't exist in the database
      tags:
        - favourite
info:
  title: 'NodeJS: Home Library Service'
  description: Endpoints according to First weeks of the task
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: user
        password:
          type: string
          example: password
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          example: b2a0661b-20e9-4597-9c55-48105e4fa196
        login:
          type: string
          example: user
        password:
          type: string
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1690838071481
        updatedAt:
          type: number
          example: 1690838071481
      required:
        - id
        - login
        - password
        - version
        - createdAt
        - updatedAt
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: password
        newPassword:
          type: string
          example: newpassword
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Zombie
        duration:
          type: number
          example: 307
        artistId:
          type: string
          example: null
        albumId:
          type: string
          example: null
      required:
        - name
        - duration
    TrackDto:
      type: object
      properties:
        name:
          type: string
          example: Zombie
        duration:
          type: number
          example: 307
        artistId:
          type: string
          example: null
        albumId:
          type: string
          example: null
        id:
          type: string
          example: d598c59f-2bfc-465e-8d57-58eccb649b14
      required:
        - name
        - duration
        - id
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Zombie
        duration:
          type: number
          example: 307
        artistId:
          type: string
          example: null
        albumId:
          type: string
          example: null
      required:
        - name
        - duration
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: The Cranberries
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    ArtistDto:
      type: object
      properties:
        name:
          type: string
          example: The Cranberries
        grammy:
          type: boolean
          example: false
        id:
          type: string
          example: 5fba5a9f-4c8d-44e4-807f-afc89d2dab66
      required:
        - name
        - grammy
        - id
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: The Cranberries
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: No Need to Argue
        year:
          type: number
          example: 1994
        artistId:
          type: string
          example: null
      required:
        - name
        - year
    AlbumDto:
      type: object
      properties:
        name:
          type: string
          example: No Need to Argue
        year:
          type: number
          example: 1994
        artistId:
          type: string
          example: null
        id:
          type: string
          example: d8e625a1-cd53-4a12-94c0-9b6b253877ab
      required:
        - name
        - year
        - id
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: No Need to Argue
        year:
          type: number
          example: 1994
        artistId:
          type: string
          example: null
      required:
        - name
        - year
    Favourite:
      type: object
      properties:
        artists:
          type: object
        albums:
          type: object
        tracks:
          type: object
      required:
        - artists
        - albums
        - tracks
